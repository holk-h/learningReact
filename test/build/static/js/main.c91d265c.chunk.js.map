{"version":3,"sources":["Gradient/styles.module.css","Button/style.module.css","Button/index.js","Gradient/gradient-index.js","App.js","Test.js","serviceWorker.js","index.js"],"names":["module","exports","Button","children","color","type","oncl1ck","className","styles","button","red","black","secondary","onClick","Gradient","useState","color1","setColor1","color2","setColor2","handleInputChange","$","target","name","value","container","style","background","inputGroup","inputColor","onChange","button1","App","width","height","Test","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,WAAa,2BAA2B,QAAU,0B,gBCA1GD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,IAAM,mBAAmB,MAAQ,qBAAqB,UAAY,2B,0MCGpG,SAASC,EAAT,GAAgE,IAAD,EAA7CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,MAAmC,IAA5BC,YAA4B,MAArB,UAAqB,EAAVC,EAAU,EAAVA,QAChE,OAAM,4BAAQC,UAAWA,IAAUC,IAAOC,QAAR,mBAC7BD,IAAOE,IAAgB,QAAVN,GADgB,cAE7BI,IAAOG,MAAkB,UAAVP,GAFc,cAG7BI,IAAOI,UAAqB,cAATP,GAHU,IAI9BQ,QAASP,GAAUH,G,2BCLZ,SAASW,IAAY,IAAD,EAEHC,mBAAS,WAFN,mBAExBC,EAFwB,KAEhBC,EAFgB,OAGHF,mBAAS,WAHN,mBAGxBG,EAHwB,KAGhBC,EAHgB,KAK/B,SAASC,EAAkBC,GAAI,IAAD,EACFA,EAAEC,OAAlBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACD,WAATD,GACAN,EAAUO,GAED,WAATD,GACAJ,EAAUK,GASlB,OACI,yBAAKjB,UAAWC,IAAOiB,UAAWC,MAAO,CAACC,WAAW,yBAAD,OAA0BX,EAA1B,aAAqCE,KACrF,yBAAKX,UAAWC,IAAOoB,YACnB,mFACA,2BACIvB,KAAK,QACLmB,MAAOR,EACPO,KAAK,SACLhB,UAAWC,IAAOqB,WAClBC,SAAUV,KAGlB,yBAAKb,UAAWC,IAAOoB,YACnB,mFACA,2BACIvB,KAAK,QACLmB,MAAON,EACPK,KAAK,SACLhB,UAAWC,IAAOqB,WAClBC,SAAUV,KAGlB,kBAAClB,EAAD,CAAQK,UAAWC,IAAOuB,QAClBzB,QA5BhB,SAAqBe,GACjBJ,EAAU,WACVE,EAAU,aAyBN,kCAEA,kBAACjB,EAAD,iCACA,kBAACA,EAAD,CAAQE,MAAM,OAAd,4BACA,kBAACF,EAAD,CAAQE,MAAM,SAAd,4BACA,kBAACF,EAAD,CAAQG,KAAK,aAAb,4BACA,kBAACH,EAAD,CAAQE,MAAM,MAAMC,KAAK,aAAzB,4BACA,kBAACH,EAAD,CAAQE,MAAM,QAAQC,KAAK,aAA3B,6BC9BG2B,MAjBf,WACE,OACI,0BAAMN,MAAO,CAACO,MAAM,QAAQC,OAAO,UAC/B,kBAACpB,EAAD,QCFKqB,MAJf,WACI,OAAO,uBAAG5B,UAAU,aAAb,iBCQS6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SACjDH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c91d265c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__18_Jr\",\"inputColor\":\"styles_inputColor__ldjks\",\"button1\":\"styles_button1__hvqWL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"style_button__2wEiB\",\"red\":\"style_red__2sjOn\",\"black\":\"style_black__3rmcn\",\"secondary\":\"style_secondary__7e8BS\"};","import React from \"react\";\r\nimport styles from \"./style.module.css\"\r\nimport className from \"classname\"\r\n\r\nexport default function Button({ children, color, type = \"primary\" ,oncl1ck }){\r\n    return<button className={className(styles.button,{\r\n        [styles.red]: color === \"red\",\r\n        [styles.black]: color === \"black\",\r\n        [styles.secondary]: type === \"secondary\",\r\n    })} onClick={oncl1ck}>{children}</button>;\r\n}","import React, {useState} from \"react\"\r\nimport Button from \"../Button\";\r\nimport styles from \"./styles.module.css\"\r\n\r\nexport default function Gradient() {\r\n\r\n    const [color1, setColor1] = useState(\"#00F260\");\r\n    const [color2, setColor2] = useState(\"#0575E6\");\r\n\r\n    function handleInputChange($) {\r\n        const { name, value } = $.target;\r\n        if (name === \"color1\"){\r\n            setColor1(value);\r\n        }\r\n        if (name === \"color2\"){\r\n            setColor2(value);\r\n        }\r\n    }\r\n\r\n    function handleClick($) {\r\n        setColor1('#00F260');\r\n        setColor2('#0575E6');\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container} style={{background:`linear-gradient(75deg,${color1}, ${color2}`}}>\r\n            <div className={styles.inputGroup}>\r\n                <label>请选择第一个颜色</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={color1}\r\n                    name=\"color1\"\r\n                    className={styles.inputColor}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <div className={styles.inputGroup}>\r\n                <label>请选择第二个颜色</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={color2}\r\n                    name=\"color2\"\r\n                    className={styles.inputColor}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </div>\r\n            <Button className={styles.button1}\r\n                    oncl1ck={handleClick}>重置为默认</Button>\r\n            <Button>默认按钮</Button>\r\n            <Button color=\"red\">红色按钮</Button>\r\n            <Button color=\"black\">黑色按钮</Button>\r\n            <Button type=\"secondary\">默认按钮</Button>\r\n            <Button color=\"red\" type=\"secondary\">红色按钮</Button>\r\n            <Button color=\"black\" type=\"secondary\">黑色按钮</Button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\n// eslint-disable-next-line no-unused-vars\nimport Button from \"./Button\";\nimport Gradient from \"./Gradient/gradient-index\";\n\nfunction App() {\n  return (\n      <main style={{width:\"100vw\",height:\"100vh\"}}>\n          <Gradient/>\n          {/**<div className=\"buttons\">\n          <Button>默认按钮</Button>\n          <Button color=\"red\">红色按钮</Button>\n          <Button color=\"black\">黑色按钮</Button>\n          <Button type=\"secondary\">默认按钮</Button>\n          <Button color=\"red\" type=\"secondary\">红色按钮</Button>\n          <Button color=\"black\" type=\"secondary\">黑色按钮</Button>\n        </div>*/}\n      </main>\n\n  )\n}\n\nexport default App;\n","import React from \"react\";\r\nimport './App.css';\r\n\r\nfunction Test() {\r\n    return <p className=\"Test-test\">test success</p>;\r\n}\r\n\r\nexport default Test;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Test from './Test'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Test />,document.getElementById('test'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}